#!/bin/sh

. "${PM_FUNCTIONS}"

SATA_ALPM_ENABLE=${SATA_ALPM_ENABLE:-true}
SATA_ALPM_MODE=${SATA_ALPM_MODE:-min_power}

help() {
cat <<EOF
$0: SATA link power management

This hook tries to save power by allowing SATA controllers to
reduce power usage when the SATA subsystem is otherwise idle.

This adds a little bit of latency to drive accesses in
exchange for moderate power savings if you are not using the drive.

This hook has 2 parameter:
SATA_ALPM_ENABLE = whether to use SATA ALPM on battery.
Defaults to "true".

SATA_ALPM_MODE = the mode to use when asked to save power.
Defaults to "min_power"

EOF
}

save_defaults() {
    state_exists "${0##*/}_${1##*/}" && return
    cat "$1/link_power_management_policy" |savestate "${0##*/}_${1##*/}"
}

restore_default() {
    if state_exists "${0##*/}_${1##*/}"; then
        restorestate "${0##*/}_${1##*/}" >"$1/link_power_management_policy"
    else
        echo max_performance > "$1/link_power_management_policy"
    fi
}
    

set_sata_alpm() {
    save_defaults "$1"
    printf "Setting SATA APLM on %s to %s..." "${1##*/}" "$SATA_ALPM_MODE"
	echo "$SATA_ALPM_MODE" > "$1/link_power_management_policy" && \
            echo Done. || echo Failed.
}

for_each_link() {
    [ "$SATA_ALPM_ENABLE" = true ] || exit $NA
    # see kernel commit 6013efd8860bf15c1f86f365332642cfe557152f
    kv="$(uname -r)"
    [ "$kv" ] || exit $NA  #for paranoia's sake
    [ "${kv%-*}" \< "2.6.33" ] && exit $NA  # avoid fs corruption
    for f in /sys/class/scsi_host/host*; do
	[ -w "$f/link_power_management_policy" ] || continue
        "$1" "$f" && echo Done. || \
	    echo Failed.
    done
}

case $1 in
    true)  for_each_link set_sata_alpm;;
    false) for_each_link restore_default;;
    help) help;;
    *) exit $NA;;
esac

exit 0
